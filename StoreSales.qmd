---
title: "StoreSales_EDA"
format: html
editor: visual
---

```{r}
library(readr)
library(ggplot2)
library(plotly)
library(dplyr)
library(lubridate)
```

```{r}
holidays_events <- read_csv("store-sales-time-series-forecasting/holidays_events.csv")
oil <- read_csv("store-sales-time-series-forecasting/oil.csv")
sample_submission <- read_csv("store-sales-time-series-forecasting/sample_submission.csv")
test <- read_csv("store-sales-time-series-forecasting/test.csv")
train <- read_csv("store-sales-time-series-forecasting/train.csv")
transactions <- read_csv("store-sales-time-series-forecasting/transactions.csv")
stores <- read_csv("store-sales-time-series-forecasting/stores.csv")
```

### Train Data

#### Correlation between total sales and total number of items on promotion at that given date

```{r}
# Show correlation between sales and on promotion for each type of prodcut
train_subset <- train %>%
  group_by(family) %>%
  slice_sample(n = 5000, replace = FALSE) %>% # Randomly select up to 1000 rows per product
  ungroup()

plot_family <- function(family_name) {
  family_data <- subset(train_subset, family == family_name)  # Filter data for the products
  
  # Remove bottom 10% of onpromotion values
  threshold <- max(family_data$onpromotion) / 5
  family_data <- family_data %>%
    filter(onpromotion > threshold)
  
  # Check if there is enough data to proceed
  if (nrow(family_data) < 2) {
  message(paste("Skipping family:", family_name, "- Not enough data after filtering"))
  return(NULL)
  }
  
  # Fit a linear model
  model <- lm(sales ~ onpromotion, data = family_data)
  r_squared <- summary(model)$r.squared
  
  ggplot(family_data, aes(x = onpromotion, y = sales)) +
    geom_point(color = "blue", size = 2, alpha = 0.7) +
    geom_smooth(method = "lm", color = "red", se = FALSE) + # Add linear regression line
    labs(
      title = paste("Correlation between Total Sales and Promotions for", family_name),
      x = "Items Promoted (onpromotion)",
      y = "Total Sales"
    ) +
    annotate(
      "text", 
      x = max(family_data$onpromotion, na.rm = TRUE) * 0.8, 
      y = max(family_data$sales, na.rm = TRUE) * 0.9, 
      label = paste("RÂ² =", round(r_squared, 3)),
      color = "darkred",
      size = 5
    ) +
    theme_minimal()
}

# Generate plots for each product
unique_items <- unique(train_subset$family)

sales.onpromotion <- lapply(unique_items, function(family) {
  plot_family(family)  # Generate plot for each family
})

# Display all plots
sales.onpromotion
```

#### Percentage sales for each product compared over store number

```{r}
plot_sales_by_family <- function(train, product_type) {
  # Filter data for the given family type and calculate total sales by store
  filtered_data <- train %>%
    group_by(store_nbr) %>%
    summarise(total_sales = sum(sales, na.rm = TRUE),
            product_sales = sum(sales[family == product_type], na.rm = TRUE)) %>%
    mutate(percentage = product_sales / total_sales * 100) %>%
    arrange(desc(percentage))
  
  top_5_stores <- head(filtered_data, 5)$store_nbr
  
  # Create the ggplot
  p <- ggplot(filtered_data, aes(x = factor(store_nbr), y = percentage)) +
    geom_bar(stat = "identity", aes(fill = store_nbr %in% top_5_stores), color = "black") +
    scale_fill_manual(values = c("TRUE" = "green", "FALSE" = "steelblue")) +
    labs(
      title = paste("Percentage of Total Sales for", product_type, "by Store"),
      x = "Store Number",
      y = "Total Sales"
    ) +
    theme_minimal() +
    theme(legend.position = "none")
  
  # Convert to an interactive plotly plot
  ggplotly(p)
}

unique_families <- unique(train$family)
plots <- lapply(unique_families, function(family) {
  plot_sales_by_family(train, family)
})

# Display the plot for the first family
plots
```

#### Top products sold for each store

```{r}
# Top product
## Find the top product sold for each store
top_product_store_sales <- train %>%
  group_by(store_nbr, family) %>%
  summarise(total_sales = sum(sales, na.rm = TRUE)) %>%
  arrange(store_nbr, desc(total_sales)) %>%
  slice(1) %>%
  ungroup()

## Create a plot showing the highest total sales by family for each store
x <- ggplot(top_product_store_sales, aes(x = factor(store_nbr), y = total_sales, fill = family)) +
  geom_bar(stat = "identity") +
  labs(title = "Highest Product Sales for Each Store",
       x = "Store Number",
       y = "Total Sales") +
  theme_minimal() +
  theme(legend.position = "bottom")
ggplotly(x)

# 2nd Highest Product
## Find the 2nd highest product sold for each store
top_product_store_sales <- train %>%
  group_by(store_nbr, family) %>%
  summarise(total_sales = sum(sales, na.rm = TRUE)) %>%
  arrange(store_nbr, desc(total_sales)) %>%
  slice(2) %>%
  ungroup()

## Create a plot showing the 2nd highest total sales by family for each store
x <- ggplot(top_product_store_sales, aes(x = factor(store_nbr), y = total_sales, fill = family)) +
  geom_bar(stat = "identity") +
  labs(title = "2nd Highest Product Sales for Each Store",
       x = "Store Number",
       y = "Total Sales") +
  theme_minimal() +
  theme(legend.position = "bottom")
ggplotly(x)

# 3rd Highest Product
## Find the 3rd highest product sold for each store
top_product_store_sales <- train %>%
  group_by(store_nbr, family) %>%
  summarise(total_sales = sum(sales, na.rm = TRUE)) %>%
  arrange(store_nbr, desc(total_sales)) %>%
  slice(3) %>%
  ungroup()

## Create a plot showing the 3rdc highest total sales by family for each store
x <- ggplot(top_product_store_sales, aes(x = factor(store_nbr), y = total_sales, fill = family)) +
  geom_bar(stat = "identity") +
  labs(title = "3rd Highest Product Sales for Each Store",
       x = "Store Number",
       y = "Total Sales") +
  theme_minimal() +
  theme(legend.position = "bottom")
ggplotly(x)
```

#### Average sales for each product by day of the year

```{r}
average_sales_by_product <- function(data, family_name) {
# Convert date to Date type
train$date <- as.Date(train$date)

# Filter data for the specified product family and remove January 1st
train_filtered <- train %>%
  filter(family == family_name) %>%
  filter(format(date, "%m-%d") != "01-01")

# Extract month and day of the month
train_filtered <- train_filtered %>%
  mutate(month_day = format(date, "%m-%d"))

# Calculate average sales for each day of the year
average_sales <- train_filtered %>%
  group_by(month_day) %>%
  summarise(average_sales = mean(sales, na.rm = TRUE)) %>%
  ungroup()

# Plot time series graph for the specified product family
p <- ggplot(average_sales, aes(x = as.Date(month_day, format = "%m-%d"), y = average_sales)) +
  geom_line(color = "blue") +
  scale_x_date(date_labels = "%b", date_breaks = "1 month") +
  labs(title = paste("Average Sales for", family_name, "by Day of Year"),
       x = "Month",
       y = "Average Sales") +
  theme_minimal()

ggplotly(p)
}

# Unique product families
unique_families <- unique(train$family)

# Generate plots for each product family
sales_plots <- lapply(unique_families, function(family) {
  average_sales_by_product(train, family)
})

# Display the plots
sales_plots
```

```{r}
# Convert date column to Date type
transactions$date <- as.Date(transactions$date)

# Extract the day of the month
transactions <- transactions %>%
  mutate(day_of_month = day(date))  # Extract day from date

# Summarize total transactions by day of the month
transactions_by_day <- transactions %>%
  group_by(day_of_month) %>%
  summarise(total_transactions = sum(transactions, na.rm = TRUE))

# Create a plotly plot
plot_ly(transactions_by_day, x = ~day_of_month, y = ~total_transactions, type = 'scatter', mode = 'lines+markers',
        marker = list(color = 'rgba(34, 139, 34, .9)'),
        line = list(color = 'rgba(0, 100, 0, .9)')) %>%
  layout(title = "Total Transactions by Day of Month",
         xaxis = list(title = "Day of Month"),
         yaxis = list(title = "Total Transactions"))

# Convert date column to Date type and extract day of the month
transactions <- transactions %>%
  mutate(date = as.Date(date),
         day_of_month = day(date))

# Filter out the 29th, 30th, and 31st days
filtered_df <- transactions %>%
  filter(day_of_month < 29)

# Summarize total transactions by day of the month
transactions_by_day <- filtered_df %>%
  group_by(day_of_month) %>%
  summarise(total_transactions = sum(transactions, na.rm = TRUE))

# Create a plotly plot
plot_ly(transactions_by_day, x = ~day_of_month, y = ~total_transactions, type = 'scatter', mode = 'lines+markers',
        marker = list(color = 'rgba(100, 149, 237, .9)'),
        line = list(color = 'rgba(65, 105, 225, .9)')) %>%
  layout(title = "Total Transactions by Day of Month (Excluding 29th, 30th, 31st)",
         xaxis = list(title = "Day of Month"),
         yaxis = list(title = "Total Transactions"))

# Convert date column to Date type and extract day of the month
transactions <- transactions %>%
  mutate(date = as.Date(date),
         day_of_month = day(date))

# Filter out the 29th, 30th, 31st days and any data from January
filtered_df <- transactions %>%
  filter(day_of_month < 29, month(date) != 1)

# Summarize total transactions by day of the month
transactions_by_day <- filtered_df %>%
  group_by(day_of_month) %>%
  summarise(total_transactions = sum(transactions, na.rm = TRUE))

# Create a plotly plot
plot_ly(transactions_by_day, x = ~day_of_month, y = ~total_transactions, type = 'scatter', mode = 'lines+markers',
        marker = list(color = 'rgba(255, 99, 71, .9)'),
        line = list(color = 'rgba(255, 69, 0, .9)')) %>%
  layout(title = "Total Transactions by Day of Month (Excluding 29th, 30th, 31st and January)",
         xaxis = list(title = "Day of Month"),
         yaxis = list(title = "Total Transactions"))

# Convert date column to Date type and extract day of the month
transactions <- transactions %>%
  mutate(date = as.Date(date),
         day_of_month = day(date))

# Filter out the 29th, 30th, 31st days and any data from January and December
filtered_df <- transactions %>%
  filter(day_of_month < 29, !month(date) %in% c(1, 12))

# Summarize total transactions by day of the month
transactions_by_day <- filtered_df %>%
  group_by(day_of_month) %>%
  summarise(total_transactions = sum(transactions, na.rm = TRUE))

# Create a plotly plot
plot_ly(transactions_by_day, x = ~day_of_month, y = ~total_transactions, type = 'scatter', mode = 'lines+markers',
        marker = list(color = 'rgba(255, 140, 0, .9)'),
        line = list(color = 'rgba(255, 69, 0, .9)')) %>%
  layout(title = "Total Transactions by Day of Month (Excluding 29th, 30th, 31st, January, and December)",
         xaxis = list(title = "Day of Month"),
         yaxis = list(title = "Total Transactions"))

```
